{
  "schedule": {
    "prefix": "schedule",
    "description": "call to vim.schedule()",
    "body": [
      "vim.schedule(function()", //
      "\t$0",
      "end)"
    ]
  },
  "schedulewrap": {
    "prefix": "schedulewrap",
    "description": "call to vim.schedule_wrap()",
    "body": [
      "vim.schedule_wrap(function()", //
      "\t$0",
      "end)"
    ]
  },
  "optrequire": {
    "prefix": "optrequire",
    "description": "optional require()",
    "body": ["local ${2:module}_available, ${2:module} = pcall(require, '$1')"]
  },
  "iterlist": {
    "prefix": "iterlist",
    "description": "iterate over a list-style table",
    "body": [
      "for ${3:_}, ${2:element} in ipairs(${1:list}) do", //
      "\t$0",
      "end"
    ]
  },
  "iterdict": {
    "prefix": "iterdict",
    "description": "iterate over a dictionary-style table",
    "body": [
      "for ${2:key}, ${3:value} in ipairs(${1:dict}) do", //
      "\t$0",
      "end"
    ]
  },
  "nodecallback": {
    "prefix": "nodecallback",
    "description": "Node.js-style callback for luv",
    "body": [
      "function(${2:err}, ${1:...})",
      "\tif ${2:err} then",
      "\t\treturn callback(${2:err})",
      "\tend",
      "\t$0",
      "end"
    ]
  },
  "timeit": {
    "prefix": "timeit",
    "description": "measure time of a section of code",
    "body": [
      "local start_time${1:_test} = vim.loop.hrtime()",
      "$0",
      "local elapsed_time${1:_test} = vim.loop.hrtime() - start_time${1:_test}",
      "print(elapsed_time${1:_test} / 1e6)"
    ]
  },
  "validate": {
    "prefix": "validate",
    "description": "check a parameter with vim.validate()",
    "body": ["vim.validate('${1}', ${1:param}, '${2:type}')"]
  }
}
